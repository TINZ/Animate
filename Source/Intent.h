//	Filename:		Intent.h
//	Version:		Final
//	Author:			Paul Tinsley (pmbtin)
//	Date:			8 February, 1999
//	Platform:		Visual C++ 5.00

//	Symbology:		Numbers, functions and data variables are enclosed in
//					square parentheses "[]". This is to remove any
//					ambiguity within the text of comments. All private data
//					member variables are prefixed by "i_".

//	Errors:			All error messages appended to "errlog.txt"

//	Purpose:		Generic intention structure for agents. After an agent has
//					decided its action, it loads its [Intent] with the action. The
//					action may then be arbitrated. [i_key] is a special sorting key
//					that is generated by the class based on [i_x] and [i_y]. In
//					order to sort a list of [Intent]'s, one requires a unique mapping
//					from an ([x],[y]) pair to a number [n]. This number allows comparison
//					between two [Intent] objects on the basis of their [i_x] and [i_y]
//					coordinates. If they have the same coordinates, they will have the
//					same [n], otherwise [i_key] will differ. This mapping allows a finite
//					contiguous list from [0] to [i_const] * [i_const].

//					Operators ==, < and > have been included to allow this class to be
//					placed within an STL container. This is a VC++ 5.00 specific
//					requirement and not general to ANSI C++. Obviously, they have their
//					uses too!

// Function Comment Style:

// Purpose:			Purpose of the function.
// Preconditions:	What states or conditions must be met before execution
//					of the function.
// Returns:			The object or primitive type that the function returns.
// Side Effects:	Effects that the function may have on private data that
//					are not immediately obvious to the nature of the function.
//					This section may also contain advice and miscellaneous
//					comments.
// Errors:			What type of error is generated, why it is generated and
//					its effects.

//	*** PRECONDITIONS WITHIN THE SCOPE OF THIS CLASS ***

// All variables and parameters are assumed to have positive values, despite the fact
// that they may have negative values due to their type. Using negative numbers may
// have unpredictable or undesired results.

#ifndef __INTENT_H
#define __INTENT_H

#include <fstream>				// error logs
#include <stddef.h>				// for exit from the program
#include "Grid.h"				// for calculating [MAX_KEY]

//	*** GLOBALS ***

const short MAX_PRIORITY = 3000;						// maximum [i_priority]
const short MAX_KEY = MAX_DIMENSION * MAX_DIMENSION;	// the maximum [i_key] value

//	*** CLASS DEFINITION ***

class Intent

{

	public:

	//	*** CONSTRUCTORS ***

	Intent(): i_name(0), i_action(0), i_priority(0), i_x(0), i_y(0),
				i_key(0), i_const(0){};

	// Purpose:			Default constructor.
	// Preconditions:	None.
	// Returns:			An [Intent] object.
	// Side Effects:	Caution, because [i_const] has not been defined,
	//					[i_key] is nonsense. Use [put] to set all of the
	//					attributes of the object before any further use
	//					of the class instance.
	// Errors:			None.

	Intent(short n, short a, short p, short x, short y, short c);

	// Purpose:			Constructs an intent object setting members as
	//					follows: [i_name] gets [n], [i_action] gets [a]
	//					[i_priority] gets [p], [i_x] gets [x], [i_y] gets [y]
	//					[i_const] gets [c]. The member [i_const] allows the class
	//					to generate a unique key in [i_key] based on [i_x]
	//					and [i_y].
	// Preconditions:	[c] >= MIN_DIMENSION && [c] <= MAX_DIMENSION.
	//					[p] >= MAX_PRIORITY && [p] >= [0].
	//					As [n], [a], [x] and [y] should already be implicitly
	//					range checked in the associated classes, no checking
	//					of their values occurs here.
	// Returns:			An [Intent] object.
	// Side Effects:	[i_key] is generated, see private function [set_key()].
	// Errors:			[errlog] error message if precondition violation.
	//					Program then terminates.

	Intent(const Intent &i);

	// Purpose:			Copy constructor. Destructively assigns [i] to the
	//					current context.
	// Preconditions:	None.
	// Returns:			An [Intent] object.
	// Side Effects:	None.
	// Errors:			None.

	//	*** OPERATORS ***

	Intent & operator =(const Intent &i);

	// Purpose:			Destructive assignment.
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.
	
	const friend bool operator ==(const Intent &a, const Intent &b)

	// Purpose:			Deep equality operator.
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.

	{

		// intents are equal if same action, in same location
		// with same coordinate key

		return(a.i_action == b.i_action && a.i_key == b.i_key);

	}

	const friend bool operator <(const Intent &a, const Intent &b)

	// Purpose:			Less-than operator. An Intent is less than another
	//					Intent if its action is lower in value. Further sorting
	//					predicates are defined after the class definition in
	//					this file.
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.

	{
		
		return(a.i_action < b.i_action);

	};

	const friend bool operator >(const Intent &a, const Intent &b)

	// Purpose:			Greater-than operator. An Intent is greater than another
	//					Intent if its action is higher.
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.

	{
		
		return(a.i_action > b.i_action);
		
	};
	
	// *** PUBLIC FUNCTION PROTOTYPES ***

	const void get(short &n, short &a, short &p, short &x, short &y);

	// Purpose:			[n] gets [i_name], [a] gets [i_action],
	//					[p] gets [i_priority], [x] gets [i_x],
	//					[y] gets [i_y].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.
	
	const void get(short &a, short &x, short &y);

	// Purpose:			[a] gets [i_action], [x] gets [i_x], [y] gets [i_y].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.
	
	const void get(short &x, short &y);

	// Purpose:			[x] gets [i_x] and [y] gets [i_y].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.

	const short get_name();

	// Purpose:			Returns [i_name].
	// Preconditions:	None.
	// Returns:			[short].
	// Side Effects:	None.
	// Errors:			None.

	const void get_action(short &a, short &p, short &k);

	// Purpose:			[a] gets [i_action], [p] gets [i_priority],
	//					[k] gets [i_key].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.

	const short get_action();

	// Purpose:			Returns [i_action].
	// Preconditions:	None.
	// Returns:			[short].
	// Side Effects:	None.
	// Errors:			None.
	
	const short get_priority();
	
	// Purpose:			Returns [i_priority].
	// Preconditions:	None.
	// Returns:			[short].
	// Side Effects:	None.
	// Errors:			None.

	const short get_key();

	// Purpose:			Returns [i_key].
	// Preconditions:	None.
	// Returns:			[short].
	// Side Effects:	None.
	// Errors:			None.

	void put(const short n, const short a, const short p, const short x,
				const short y, const short c);

	// Purpose:			[n] puts [i_name], [a] puts [i_action],
	//					[p] puts [i_priority], [x] puts [i_x],
	//					[y] puts [i_y], [c] puts [i_const].
	// Preconditions:	[p] >= MAX_PRIORITY && [p] >= [0].
	//					[c] >= MIN_DIMENSION && [c] <= MAX_DIMENSION.
	// Returns:			None.
	// Side Effects:	[i_key] is generated, see private function
	//					[set_key()].
	// Errors:			See [set_key()].
	
	void put(const short a, const short x, const short y);

	// Purpose:			[a] puts [i_action], [x] puts [i_x], [y] puts [i_y].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	[i_key] is generated, see private function
	//					[set_key()].
	// Errors:			See [set_key()].

	void inc_priority();

	// Purpose:			Add one to [i_priority].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			Caution [errlog] message if [i_priority] exceeds
	//					[MAX_PRIORITY]. [i_priority] becomes 0.

	void set_name(const short n);

	// Purpose:			Changes [i_name] to [n].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.

	void set_action(const short a);

	// Purpose:			Changes [i_action] to [a].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.

	void reset_priority();

	// Purpose:			Sets [i_priority] to 0.
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			None.

	private:

	//	*** PRIVATE VARIABLES ***

	short i_name;		// agent's name
	short i_action;		// agent's intended action
	short i_priority;	// priority of that action
	short i_x;			// x-coordinate where action is to take place
	short i_y;			// y-coordinate where action is to take place
	short i_key;		// unique number based on i_x,i_y and i_const
						// generated by the class
	short i_const;		// max value that i_x and i_y may have

	//	*** PRIVATE FUNCTION PROTOTYPES ***

	void set_key();
	
	// Purpose:			Generate the value for [i_key] based on [i_x],
	//					[i_y] and [i_const].
	// Preconditions:	None.
	// Returns:			None.
	// Side Effects:	None.
	// Errors:			If [i_key] is greater than [MAX_KEY], program
	//					terminates. [errlog] message generated.

};

//	*** COMPARISON PREDICATES ***

// The following classes provide additional comparison predicates involved
// in sorting a collection of [Intent] objects.

class compare_intent_names

{

public:

	bool operator () (Intent &a, Intent &b)

	{

		return(a.get_name() < b.get_name());

	}

};

class compare_intent_keys

{

public:

	bool operator () (Intent &a, Intent &b)

	{

		return(a.get_key() < b.get_key());

	}

};

class compare_intent_priorities

{

public:

	bool operator () (Intent &a, Intent &b)

	{

		return(a.get_priority() > b.get_priority());

	}

};

#endif